///More features will be added in the future.
//There is no fast or SLOW time setting as in normal/simple digital clocks. In this clock, each digit of the clock display can be set one by one via 2 setting buttons.
//Features
//1. Bright Led 7-Segment display without Multiplexing
//2. Display: Hour, Minute, Second
//3. Set time via 2 buttons
//4. Set time Digit by Digit
//5. Use internal oscillator of PIC16F627a or PIC16F628
//6. Use 32.768KHz crystal for better clock accuracy


//Setting Time:
//1. The clock shows 12:34:56 when power the clock on. The first digit of hour (it's number 1 in this case) will be blinking to notify that the time is not correct and need to be set.
//2. Press SET button to count up the digit.
//3. Press MODE button when the digit is the correct time. The next digit will be blinking.
//4. Repeat step 2 and 3 for setting minute and second.
//5. Make sure that pressing MODE button for setting the second digit of second at the correct time.
// PUNKKY@gmail.com 




//4 digit  clock 
//Using timer1 16bit counter interrupt 
// PIC16F627A or PIC18F45k80
// Internal Clock 4MHz 



#define S1 PORTC.F1
#define S2 PORTC.F2
#define S3 PORTC.F5
#define S4 PORTC.F6
#define S5 PORTC.F7

#define AD PORTD.F5
#define BC PORTD.F6

#define MH PORTD.F0
#define ML PORTD.F1
#define HH PORTD.F2
#define HL PORTD.F3
#define DOT PORTD.F4
#define GPS PORTD.f5

#include <i2c.h>
#include <bit.h>
#include <stdio.h>

ASTR=0x00
PORTA=0x12

for a=12 to a=200, a++;
{
while(1)
        {
        min-1=sd;
        hour+1=sd;
        }






SADA.E=0X0
for i=1 to i==100 i++;
        {
                clear the board
                start stdio.h
                start conio.h
                while (i==2)
                        {
                        start real.b2
                        dont do this again
                        }
                i++
        }




#define MODE PORTB.F4 
#define SET PORTB.F5 
#define Sec_port_l PORTA.F6 
#define Sec_port_h PORTA.F4 
#define Min_port_l PORTA.F3 
#define Min_port_h PORTA.F2 
#define Hr_port_l PORTA.F1 
#define Hr_port_h PORTA.F0 
#define Blink PORTA.F7 
#define HTMR1 0x80 
#define LTMR1 0x00 
typedef unsigned short uns8; 
uns8 i; 
uns8 hr_h; 
uns8 hr_l; 
uns8 min_h; 
uns8 min_l; 
uns8 sec_h; 
uns8 sec_l; 
uns8 tick; 
uns8 myTimer;
uns8 setting_time;
void setup ();
void set_time ();
void show_time ();
void display (uns8 digit);
void blink_digit (uns8 digit);
void check_bt ();







void interrupt () 
{ 
        PIR1.TMR1IF = 0; 
        // clears TMR1IF 
        TMR1H = HTMR1; 
        tick = 1; 
        Blink = 1; 
        sec_l ++; 
        if(sec_l>9){ 
            sec_l = 0; 
            sec_h++; 
        } 
        if(sec_h>5){ 
            sec_h=0; 
            min_l++; 
        } 
        if(min_l>9){ 
            min_l = 0; 
            min_h++; 
        } 
        if(min_h>5){ 
            min_h = 0; 
            hr_l++; 
        } 
        if(hr_l>9){ 
            hr_l = 0; 
            hr_h++; 
        } 
        if(hr_h >2){ 
            hr_h = 0; 
        } 
        if(hr_h >=2 && hr_l>3){ 
           hr_h = 0; 
           hr_l = 0; 
        } 
} 
void main () 
{ 
        setup (); 
         
        //Set time 
        hr_h = 1; 
        hr_l = 2; 
        min_h = 3; 
        min_l = 4; 
        sec_h = 5; 
        sec_l = 6; 
        show_time (); 
        setting_time = 1; 
        set_time(); 
        while (1) 
        { 
                //blink_digit(); 
                if (tick) 
                { 
                        tick = 0; 
                        show_time (); 
                        Delay_ms (300); 
                        Blink = 0; 
                } 
                check_bt (); 
        } 
} 
void setup () 
{ 
        tick = 0; 
//Digital output on PORTA 
        CMCON = 0x07; 
        //Input buttons + external clock 
        TRISB = 0xB0; 

        PORTB = 0x00; 
        TRISA = 0x00; 
        PORTA = 0x00; 
        //Internal Clock 4MHz 
        PCON.OSCF = 1; 
        // Prescaler 1:1   external clock 
        T1CON = 0x0F; 

        PIE1.TMR1IE = 0;  // disable interupt to stop the clock 

        INTCON = 0xC0; 
        // Set GIE, PEIE 
        TMR1L = LTMR1; 
        TMR1H = HTMR1; 
        // TMR1 starts at 0x0BDC = 3036 to make TMR1 counts to 62500 and 
        // overclows in every 0.1 sec 
        // Math: 1/500000*8*62500 = 0.1 
        // 1/5000000 : time for 20MHz crystal (internal clock will be 20/4 = 5MHz) 
        // 8: prescaler 
        // 62500: TMR1 counts to 62500 
        // Counting number of overflows to 10 will get 1 sec. 

} 

void show_time () 
{ 
        display (1); 
        display (2); 
        display (3); 
        display (4); 
        display (5); 
        display (6); 
} 
void display (uns8 digit) 
{ 
        switch (digit) 
        { 
                case 1 : 
                PORTB = hr_h; 
                Hr_port_h = 1; 
                Hr_port_h = 0; 
                break; 
                case 2 : 
                PORTB = hr_l; 
                Hr_port_l = 1; 
                Hr_port_l = 0; 
                break; 
                case 3 : 
                PORTB = min_h; 
                Min_port_h = 1; 
                Min_port_h = 0; 
                break; 
                case 4 : 
                PORTB = min_l; 
                Min_port_l = 1; 
                Min_port_l = 0; 
                break; 
                case 5 : 
                PORTB = sec_h; 
                Sec_port_h = 1; 
                Sec_port_h = 0; 
                break; 
                case 6 : 
                PORTB = sec_l; 
                Sec_port_l = 1; 
                Sec_port_l = 0; 
                break; 
        } 
} 
void blink_digit (uns8 digit) 
{ 
        switch (digit) 
        { 
                case 1 : 
                PORTB = 0xFF; 
                Hr_port_h = 1; 
                Hr_port_h = 0; 
                Delay_ms (100); 
                display (1); 
                Delay_ms (100); 
                break; 
                case 2 : 
                PORTB = 0xFF; 
                Hr_port_l = 1; 
                Hr_port_l = 0; 
                Delay_ms (100); 
                display (2); 
                Delay_ms (100); 
                break; 
                case 3 : 
                PORTB = 0xFF; 
                Min_port_h = 1; 
                Min_port_h = 0; 
                Delay_ms (100); 
                display (3); 
                Delay_ms (100); 
                break; 
                case 4 : 
                PORTB = 0xFF; 
                Min_port_l = 1; 
                Min_port_l = 0; 
                Delay_ms (100); 
                display (4); 
                Delay_ms (100); 
                break; 
                case 5 : 
                PORTB = 0xFF; 
                Sec_port_h = 1; 
                Sec_port_h = 0; 
                Delay_ms (100); 
                display (5); 
                Delay_ms (100); 
                break; 
                case 6 : 
                PORTB = 0xFF; 
                Sec_port_l = 1; 
                Sec_port_l = 0; 
                Delay_ms (100); 
                display (6); 
                Delay_ms (100); 
                break; 
        } 
} 
void set_time () 
{ 

        i = 1; 
        while (setting_time) 
        { 
                blink_digit (i); 
                while (SET == 0) 
                { 
                        Delay_ms (5); 
                        switch (i) 
                        { 
                                case 1 : 
                                hr_h ++; 
                                if (hr_h > 2) 
                                { 
                                        hr_h = 0; 
                                } 
                                break; 
                                case 2 : 
                                hr_l ++; 
                                if (hr_l > 9) 
                                { 
                                        hr_l = 0; 
                                } 
                                if (hr_h >= 2 && hr_l > 3) 
                                { 
                                        hr_l = 0; 
                                } 
                                break; 
                                case 3 : 
                                min_h ++; 
                                if (min_h > 5) 
                                { 
                                        min_h = 0; 
                                } 
                                break; 
                                case 4 : 
                                min_l ++; 
                                if (min_l > 9) 
                                { 
                                        min_l = 0; 
                                } 
                                break; 
                                case 5 : 
                                sec_h ++; 
                                if (sec_h > 5) 
                                { 
                                        sec_h = 0; 
                                } 
                                break; 
                                case 6 : 
                                sec_l ++; 
                                if (sec_l > 9) 
                                { 
                                        sec_l = 0; 
                                } 
                                break; 
                        } 
                        while (SET == 0) 
                        { 
                                Delay_ms (5); 
                        } 
                } 
                while (MODE == 0) 
                { 
                        Delay_ms (5); 
                        i ++; 
                        if (i > 6) 
                        { 
        sec_l--; 
        TMR1H = 0x80; 
        TMR1L = 0x00; 
        PIE1.TMR1IE = 1; 
        setting_time = 0; 
                                break; 
                        } 
                        while (MODE == 0) 
                        { 
                                Delay_ms (5); 
                        } 
                } 
        } 
} 
void check_bt () 
{ 
        myTimer = 0; 
        if (setting_time == 0) 
        { 
                while (MODE == 0) 
                { 
                        Delay_ms (5); 
                        myTimer ++; 
                        if (myTimer > 200) 
                        { 
                                setting_time = 1; 
                                myTimer = 0; 
                                break; 
                        } 
                } 
        } 
        while (MODE == 0) 
        { 
                PIE1.TMR1IE = 0; 
                //Stop clock 
                Delay_ms (5); 
                blink_digit (1); 
        } 
        set_time (); 
} 




//ds3231
/* 
 * Author: Innovate Logics
 * Created on September 3, 2014, 7:58 PM
 */
#include <stdio.h>
#include <stdlib.h>
#include "config.h"
#include "lcd.h"
/*
 * 
 */
#define slave_id 0xd0

unsigned char rx_data=0;
unsigned char arr_data[7];

//  Function for setting I2C module
void i2c_setup(){
//  Making SDA as input bit
    TRISB0 = 1;
//  Making SCL as input bit
    TRISB1 = 1;
//  Enabling slew rate
    SSPSTAT = 0x00;
//  I2C Clock = 400kHz
    SSPADD  = 0x09;
    SSPCON2 = 0x00;
//  Enabling MSSP and I2C master mode, clock
    SSPCON1 = 0x28;
}
//  Funcion for transmitting data to slave
void i2c_tx(unsigned char address, unsigned char data){
//  Generate START condition
    SEN = 1;
//  Wait for the interrupt flag bit
    while(SEN == 1 && SSPIF == 0);
//  Clear the interrupt flag bit
    SSPIF = 0;
//  Write slave ID with R/W bit = 0
    SSPBUF = slave_id;
//  Wait for the interrupt flag bit
    while(SSPIF == 0);
//  Check acknowledgment from slave
    if(!(ACKSTAT)){
    //  Clear the interrupt flag bit
        SSPIF  = 0;
    //  Write the address to which you want to write data
        SSPBUF = address;
    //  Wait for the interrupt flag bit
        while(SSPIF == 0);
    //  Check acknowledgment from slave
        if(!(ACKSTAT)){
        //  Clear the interrupt flag bit
            SSPIF = 0;
        //  Write data
            SSPBUF = data;
        //  Wait for the interrupt flag bit
            while(SSPIF == 0);
        //  Check acknowledgment from slave
            if(!(ACKSTAT)){
            //  Clear the interrupt flag bit
                SSPIF = 0;
            //  Generate STOP condition
                PEN = 1;
            //  Wait for the interrupt flag bit
                while(PEN == 1 && SSPIF == 0);
            //  Clear the interrupt flag bit
                SSPIF = 0;
            }
            else{
                lcd_display("ERROR");
            }
        }
        else{
            lcd_display("ERROR");
        }
    }
    else{
        lcd_display("ERROR");
    }
    delay_ms(200);
}
//  Funcion for receiving data from slave
void i2c_rx(unsigned char address){
//  Generate START condition
    SEN = 1;
//  Wait for the interrupt flag bit
    while(SEN == 1 && SSPIF == 0);
//  Clear the interrupt flag bit
    SSPIF = 0;
//  Write slave ID with R/W bit = 0
    SSPBUF = slave_id;
//  Wait for the interrupt flag bit
    while(SSPIF == 0);
//  Check acknowledgment from slave
    if(!(ACKSTAT)){
    //  Clear the interrupt flag bit
        SSPIF = 0;
    //  Write the address from which you want to read data
        SSPBUF = address;
    //  Wait for the interrupt flag bit
        while(SSPIF == 0);
    //  Check acknowledgment from slave
        if(!(ACKSTAT)){
        //  Clear the interrupt flag bit
            SSPIF = 0;
        //  Generate a repeated start condition
            RSEN = 1;
        //  Wait for the interrupt flag bit
            while(RSEN == 1 && SSPIF == 0);
        //  Clear the interrupt flag bit
            SSPIF = 0;
        //  Write the slave Id with R/W bit = 1
            SSPBUF = slave_id+1;
        //  Wait for the interrupt flag bit
            while(SSPIF == 0);
        //  Check acknowledgment from slave
            if(!(ACKSTAT)){
            //  Clear the interrupt flag bit
                SSPIF = 0;
            //  Enable I2C receive
                RCEN  = 1;
            //  Wait for the interrupt flag bit
                while(RCEN == 1 && SSPIF == 0);
            //  Copy the received data from SSPBUF
                rx_data = SSPBUF;
            //  Clear the interrupt flag bit
                SSPIF = 0;
            //  NACK (Not Acknowledge) signal
                ACKDT = 1;
            //  Initiate acknowledgment process
                ACKEN = 1;
            //  Wait for the interrupt flag bit
                while(ACKEN == 1 && SSPIF == 0);
            //  Clear the interrupt flag bit
                SSPIF = 0;
            //  Generate STOP condition
                PEN = 1;
            //  Wait for the interrupt flag bit
                while(PEN == 1 && SSPIF == 0);
            //  Clear the interrupt flag bit
                SSPIF = 0;
            }
            else{
                lcd_display("ERROR");
            }
        }
        else{
            lcd_display("ERROR");
        }
    }
    else{
        lcd_display("ERROR");
    }
    delay_ms(100);
}
void read_day(unsigned char day){

    if(day == 0){
        day = 1;
        i2c_tx(0x03,0x01);
    }
    switch(day){
        case 1:
        lcd_display("SUNDAY  ");
        break;
        case 2:
        lcd_display("MONDAY");
        break;
        case 3:
        lcd_display("TUESDAY");
        break;
        case 4:
        lcd_display("WEDNESDAY");
        break;
        case 5:
        lcd_display("THURSDAY ");
        break;
        case 6:
        lcd_display("FRIDAY  ");
        break;
        case 7:
        lcd_display("SATURDAY");
        break;
    }
}
void display_time(){

    lcd_command(0x80);
    lcd_display("Time: ");
    lcd_data(((arr_data[2]&0x30)>>4)+48);
    lcd_data((arr_data[2]&0x0f)+48);
    lcd_data(':');
    lcd_data((arr_data[1]>>4)+48);
    lcd_data((arr_data[1]&0x0f)+48);
    lcd_data(':');
    lcd_data((arr_data[0]>>4)+48);                 //displaying seconds on LCD
    lcd_data((arr_data[0]&0x0f)+48);
    lcd_command(0xc0);lcd_display("Date: ");
    lcd_data((arr_data[4]>>4)+48);
    lcd_data((arr_data[4]&0x0f)+48);
    lcd_data('/');
    lcd_data((arr_data[5]>>4)+48);
    lcd_data((arr_data[5]&0x0f)+48);
    lcd_data('/');
    lcd_data((arr_data[6]>>4)+48);
    lcd_data((arr_data[6]&0x0f)+48);

    lcd_command(0x94);lcd_display("Day:  ");
    read_day((arr_data[3]&0x07));
}

void main(){
    unsigned char i;
//  Making PORTD as output port for LCD
    TRISD = 0x00;
//  Making all pins digital
    ADCON1 = 0x0f;
//  Initializing LCD
    lcd_initialize();
//  Displaying Welcome Messages
    lcd_display("Welcome to");
    lcd_command(0xc3);
    lcd_display("Innovate Logics");
    delay_ms(5000);
    lcd_command(0x94);
    lcd_display("We help you");
    lcd_command(0xde);
    lcd_display("to Achieve");
    delay_ms(5000);
    lcd_command(0x01);
//  Setting in-built I2C module
    i2c_setup();
//  Writing to DS3232 REGISTERS
    i2c_tx(0x0e,0x00);
    i2c_tx(0x0f,0x00);
//  Writing seconds
    i2c_tx(0x00,0x00);
//  Writing minutes
    i2c_tx(0x01,0x59);
//  Writing hours
    i2c_tx(0x02,0x23);
//  Writing day
    i2c_tx(0x03,0x03);
//  Writing date
    i2c_tx(0x04,0x31);
//  Writing month
    i2c_tx(0x05,0x12);
//  Writing year
    i2c_tx(0x06,0x13);
    
    while(1){
        if(PORTE & 0x01){
            while(i<7){
            i2c_rx(i);
            arr_data[i] = rx_data;
            i++;
            }
            display_time();
            i=0;
        }
    }
}



















//i2cccccc
#include <i2c.h>
  void main() {     
        char result;
 
    TRISC = 0x00; //turn on tri-state REGISTER and
                   //make all output pins
     PORTC = 0x00; //make all output pins LOW

     OpenI2C( MASTER, SLEW_OFF);
     SSPADD = 0x3F;

     StartI2C();                // begin I2C communications
         IdleI2C();
     WriteI2C( 0xD0 );          // addresses the chip
         IdleI2C();
     WriteI2C( 0x01 );          // access REGISTER address for minutes
         IdleI2C();
     WriteI2C( 0b00010010 );    // write value into minutes REGISTER
         IdleI2C();
     StopI2C();                 // stop condition I2C on bus

     StartI2C();                // begin I2C communications
         IdleI2C();
     WriteI2C( 0xD0 );          // addresses the chip
         IdleI2C();
     WriteI2C( 0x03 );          // access REGISTER address for day of the week
         IdleI2C();
     WriteI2C( 0x04 );          // write value into day REGISTER
         IdleI2C();
     StopI2C();                 // stop condition I2C on bus

     StartI2C();                // Start condition I2C on bus
         IdleI2C();
     WriteI2C( 0xD0 );          // addresses the chip
         IdleI2C();
     WriteI2C( 0x03 );          // write REGISTER address
         IdleI2C();
     StopI2C();                 // Stop condition I2C on bus

     StartI2C();                // Start condition I2C on bus
         IdleI2C();
     WriteI2C( 0xD1 );          // addresses the chip with a read bit
         IdleI2C();
     result = ReadI2C();        // read the value from the RTC and store in result
         IdleI2C();
     NotAckI2C();               // Not Acknowledge condition.
         IdleI2C();
     StopI2C();                 // Stop condition I2C on bus
}














#include <i2c.h>
 void main()
 {
     char result;

     TRISC = 0x00; //turn on tri-state REGISTER and
                   //make all output pins
     PORTC = 0x00; //make all output pins LOW
     
     OpenI2C( MASTER, SLEW_OFF);
     SSPADD = 0x3F;

     StartI2C();                // begin I2C communications
         IdleI2C();
     WriteI2C( 0xD0 );          // addresses the chip
         IdleI2C();
     WriteI2C( 0x01 );          // access REGISTER address for minutes
         IdleI2C();
     WriteI2C( 0b00010010 );    // write value into minutes REGISTER
         IdleI2C();
     StopI2C();                 // stop condition I2C on bus

     StartI2C();                // begin I2C communications
         IdleI2C();
     WriteI2C( 0xD0 );          // addresses the chip
         IdleI2C();
     WriteI2C( 0x03 );          // access REGISTER address for day of the week
         IdleI2C();
     WriteI2C( 0x04 );          // write value into day REGISTER
         IdleI2C();
     StopI2C();                 // stop condition I2C on bus

     StartI2C();                // Start condition I2C on bus
         IdleI2C();
     WriteI2C( 0xD0 );          // addresses the chip
         IdleI2C();
     WriteI2C( 0x03 );          // write REGISTER address
         IdleI2C();
     StopI2C();                 // Stop condition I2C on bus

     StartI2C();                // Start condition I2C on bus
         IdleI2C();
     WriteI2C( 0xD1 );          // addresses the chip with a read bit
         IdleI2C();
     result = ReadI2C();        // read the value from the RTC and STORE in result
         IdleI2C();
     NotAckI2C();               // Not Acknowledge condition.
         IdleI2C();
     StopI2C();                 // Stop condition I2C on bus
 }
